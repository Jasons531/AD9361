<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [stm32f4_ad9361\stm32f4_ad9361.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image stm32f4_ad9361\stm32f4_ad9361.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jan 10 15:31:20 2019
<BR><P>
<H3>Maximum Stack Usage =        944 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ad9361_init &rArr; ad9361_setup &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">ADC_IRQHandler</a><BR>
 <LI><a href="#[23]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">BusFault_Handler</a><BR>
 <LI><a href="#[22]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">MemManage_Handler</a><BR>
 <LI><a href="#[24]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">UsageFault_Handler</a><BR>
 <LI><a href="#[d2]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">_Error_Handler</a><BR>
 <LI><a href="#[ff]">ad9361_calculate_rf_clock_chain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ff]">ad9361_calculate_rf_clock_chain</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3b]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[77]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[82]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[79]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[78]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[72]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[71]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[81]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[80]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[75]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7f]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7c]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7d]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7e]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[84]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[2b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7a]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7b]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[89]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[4e]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[85]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[87]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[86]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[8a]">fputc</a> from usart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[1]">get_help</a> from command.o(i.get_help) referenced 2 times from command.o(.data)
 <LI><a href="#[2]">get_register</a> from command.o(i.get_register) referenced 2 times from command.o(.data)
 <LI><a href="#[15]">get_rx1_gc_mode</a> from command.o(i.get_rx1_gc_mode) referenced 2 times from command.o(.data)
 <LI><a href="#[19]">get_rx1_rf_gain</a> from command.o(i.get_rx1_rf_gain) referenced 2 times from command.o(.data)
 <LI><a href="#[17]">get_rx2_gc_mode</a> from command.o(i.get_rx2_gc_mode) referenced 2 times from command.o(.data)
 <LI><a href="#[1b]">get_rx2_rf_gain</a> from command.o(i.get_rx2_rf_gain) referenced 2 times from command.o(.data)
 <LI><a href="#[1d]">get_rx_fir_en</a> from command.o(i.get_rx_fir_en) referenced 2 times from command.o(.data)
 <LI><a href="#[f]">get_rx_lo_freq</a> from command.o(i.get_rx_lo_freq) referenced 2 times from command.o(.data)
 <LI><a href="#[13]">get_rx_rf_bandwidth</a> from command.o(i.get_rx_rf_bandwidth) referenced 2 times from command.o(.data)
 <LI><a href="#[11]">get_rx_samp_freq</a> from command.o(i.get_rx_samp_freq) referenced 2 times from command.o(.data)
 <LI><a href="#[9]">get_tx1_attenuation</a> from command.o(i.get_tx1_attenuation) referenced 2 times from command.o(.data)
 <LI><a href="#[b]">get_tx2_attenuation</a> from command.o(i.get_tx2_attenuation) referenced 2 times from command.o(.data)
 <LI><a href="#[d]">get_tx_fir_en</a> from command.o(i.get_tx_fir_en) referenced 2 times from command.o(.data)
 <LI><a href="#[3]">get_tx_lo_freq</a> from command.o(i.get_tx_lo_freq) referenced 2 times from command.o(.data)
 <LI><a href="#[7]">get_tx_rf_bandwidth</a> from command.o(i.get_tx_rf_bandwidth) referenced 2 times from command.o(.data)
 <LI><a href="#[5]">get_tx_samp_freq</a> from command.o(i.get_tx_samp_freq) referenced 2 times from command.o(.data)
 <LI><a href="#[88]">isspace</a> from isspace_c.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[83]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[16]">set_rx1_gc_mode</a> from command.o(i.set_rx1_gc_mode) referenced 2 times from command.o(.data)
 <LI><a href="#[1a]">set_rx1_rf_gain</a> from command.o(i.set_rx1_rf_gain) referenced 2 times from command.o(.data)
 <LI><a href="#[18]">set_rx2_gc_mode</a> from command.o(i.set_rx2_gc_mode) referenced 2 times from command.o(.data)
 <LI><a href="#[1c]">set_rx2_rf_gain</a> from command.o(i.set_rx2_rf_gain) referenced 2 times from command.o(.data)
 <LI><a href="#[1e]">set_rx_fir_en</a> from command.o(i.set_rx_fir_en) referenced 2 times from command.o(.data)
 <LI><a href="#[10]">set_rx_lo_freq</a> from command.o(i.set_rx_lo_freq) referenced 2 times from command.o(.data)
 <LI><a href="#[14]">set_rx_rf_bandwidth</a> from command.o(i.set_rx_rf_bandwidth) referenced 2 times from command.o(.data)
 <LI><a href="#[12]">set_rx_samp_freq</a> from command.o(i.set_rx_samp_freq) referenced 2 times from command.o(.data)
 <LI><a href="#[a]">set_tx1_attenuation</a> from command.o(i.set_tx1_attenuation) referenced 2 times from command.o(.data)
 <LI><a href="#[c]">set_tx2_attenuation</a> from command.o(i.set_tx2_attenuation) referenced 2 times from command.o(.data)
 <LI><a href="#[e]">set_tx_fir_en</a> from command.o(i.set_tx_fir_en) referenced 2 times from command.o(.data)
 <LI><a href="#[4]">set_tx_lo_freq</a> from command.o(i.set_tx_lo_freq) referenced 2 times from command.o(.data)
 <LI><a href="#[8]">set_tx_rf_bandwidth</a> from command.o(i.set_tx_rf_bandwidth) referenced 2 times from command.o(.data)
 <LI><a href="#[6]">set_tx_samp_freq</a> from command.o(i.set_tx_samp_freq) referenced 2 times from command.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[85]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[180]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[181]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[182]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[183]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_lo_freq
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_lo_freq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_lo_freq
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_lo_freq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[184]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_get_command
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_writem
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_check_commands
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calculate_rf_clock_chain
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zmalloc
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_get_command
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_gain
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_rf_gain
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_check_commands
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_check_commands
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_check_commands
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_rf_gain
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_rf_gain
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_samp_freq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_rf_bandwidth
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_fir_en
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx2_attenuation
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx1_attenuation
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_samp_freq
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_rf_bandwidth
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_fir_en
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_gc_mode
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_gc_mode
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_register
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_lo_freq
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_lo_freq
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[18a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[18c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[95]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[a6]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a3]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[18e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>Ad9361Reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(i.Ad9361Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ad9361Reset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_reset
</UL>

<P><STRONG><a name="[23]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>ERR_PTR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, util.o(i.ERR_PTR))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
</UL>

<P><STRONG><a name="[c6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad9361Reset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad9361Reset
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad9361Reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[d6]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b1]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[af]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[b5]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d8]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[db]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 730 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b9]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_SPI_Receive</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[be]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[bd]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[d9]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c1]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[dd]"></a>HAL_UART_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UART_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>HardFault_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>MX_GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>MX_SPI1_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[d3]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>SystemClock_Config</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>USART1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[de]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[cf]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_get_command
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_check_commands
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_char
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx2_attenuation
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_sampling_freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_clocks
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tracking_control
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_synth_lo_powerdown
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_atten
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_gain_ctrl_mode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_dcxo_tune
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_set_rate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_round_rate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_port_setup
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_mux_set_parent
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_set_rate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_round_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_recalc_rate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calculate_rf_clock_chain
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_set_rate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_1rx1tx_channel_map
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_split_table_gain
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_full_table_gain
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_trx_clock_chain
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txrx_synth_cp_calib
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_setup
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_control
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_phase_search
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_second_filter_calib
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_analog_filter_calib
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_vco_cal_control
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_ext_lo_control
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_writem
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_tia_calib
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_bb_analog_filter_calib
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_adc_setup
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rssi_setup
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_vco_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_dc_offset_calib
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_pp_port_setup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_mixer_gm_subtable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_gt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gpo_setup
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_setup
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_prepare
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_setup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxadc_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>

<P><STRONG><a name="[ee]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_check_commands
</UL>

<P><STRONG><a name="[ef]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[193]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[194]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[195]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f0]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[a7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f1]"></a>ad9361_1rx1tx_channel_map</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_1rx1tx_channel_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ad9361_1rx1tx_channel_map &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_attenuation
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_gain
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain_control_mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_attenuation
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_rf_gain
</UL>

<P><STRONG><a name="[f7]"></a>ad9361_bbpll_recalc_rate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_bbpll_recalc_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ad9361_bbpll_recalc_rate &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
</UL>

<P><STRONG><a name="[f9]"></a>ad9361_bbpll_round_rate</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ad9361.o(i.ad9361_bbpll_round_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ad9361_bbpll_round_rate &rArr; do_div &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
</UL>

<P><STRONG><a name="[fa]"></a>ad9361_bbpll_set_rate</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, ad9361.o(i.ad9361_bbpll_set_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ad9361_bbpll_set_rate &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_writem
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
</UL>

<P><STRONG><a name="[ff]"></a>ad9361_calculate_rf_clock_chain</STRONG> (Thumb, 526 bytes, Stack size 120 bytes, ad9361.o(i.ad9361_calculate_rf_clock_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = ad9361_calculate_rf_clock_chain &rArr;  ad9361_calculate_rf_clock_chain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calculate_rf_clock_chain
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_sampling_freq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_sampling_freq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calculate_rf_clock_chain
</UL>

<P><STRONG><a name="[102]"></a>ad9361_clk_factor_recalc_rate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_clk_factor_recalc_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_clk_factor_recalc_rate &rArr; ad9361_get_clk_scaler &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_clk_scaler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
</UL>

<P><STRONG><a name="[104]"></a>ad9361_clk_factor_round_rate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_clk_factor_round_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ad9361_clk_factor_round_rate &rArr; ad9361_set_clk_scaler &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_clk_scaler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
</UL>

<P><STRONG><a name="[106]"></a>ad9361_clk_factor_set_rate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_clk_factor_set_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_clk_factor_set_rate &rArr; ad9361_set_clk_scaler &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_clk_scaler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
</UL>

<P><STRONG><a name="[107]"></a>ad9361_clk_mux_set_parent</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_clk_mux_set_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_clk_mux_set_parent &rArr; ad9361_trx_ext_lo_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_prev_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_ext_lo_control
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[159]"></a>ad9361_dig_tune</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ad9361_conv.o(i.ad9361_dig_tune))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
</UL>

<P><STRONG><a name="[111]"></a>ad9361_do_calib_run</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_do_calib_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tracking_control
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_prev_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_dc_offset_calib
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_set_rate
</UL>

<P><STRONG><a name="[116]"></a>ad9361_en_dis_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_en_dis_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ad9361_en_dis_rx &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_gain_ctrl_mode
</UL>

<P><STRONG><a name="[117]"></a>ad9361_en_dis_tx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_en_dis_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ad9361_en_dis_tx &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[108]"></a>ad9361_ensm_force_state</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_ensm_force_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ad9361_ensm_force_state &rArr; ad9361_ensm_get_state &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_get_state
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_mux_set_parent
</UL>

<P><STRONG><a name="[119]"></a>ad9361_ensm_get_state</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad9361.o(i.ad9361_ensm_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ad9361_ensm_get_state &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
</UL>

<P><STRONG><a name="[10a]"></a>ad9361_ensm_restore_prev_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_ensm_restore_prev_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ad9361_ensm_restore_prev_state &rArr; ad9361_ensm_restore_state &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_state
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_mux_set_parent
</UL>

<P><STRONG><a name="[11a]"></a>ad9361_ensm_restore_state</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_ensm_restore_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ad9361_ensm_restore_state &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_prev_state
</UL>

<P><STRONG><a name="[11b]"></a>ad9361_ensm_set_state</STRONG> (Thumb, 604 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_ensm_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ad9361_ensm_set_state &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_vco_cal_control
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[169]"></a>ad9361_find_opt</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_find_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ad9361_find_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_phase_search
</UL>

<P><STRONG><a name="[114]"></a>ad9361_from_clk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_from_clk))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_lo_freq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_lo_freq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_set_rate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_round_rate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_full_table_gain
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_full_table_gain
</UL>

<P><STRONG><a name="[174]"></a>ad9361_get_rx_fir_en_dis</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad9361_api.o(i.ad9361_get_rx_fir_en_dis))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_fir_en
</UL>

<P><STRONG><a name="[123]"></a>ad9361_get_rx_gain</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_get_rx_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ad9361_get_rx_gain &rArr; ad9361_get_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_split_table_gain
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_full_table_gain
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_rf_gain
</UL>

<P><STRONG><a name="[173]"></a>ad9361_get_rx_gain_control_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ad9361_api.o(i.ad9361_get_rx_gain_control_mode))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx2_gc_mode
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx1_gc_mode
</UL>

<P><STRONG><a name="[125]"></a>ad9361_get_rx_lo_freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad9361_api.o(i.ad9361_get_rx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ad9361_get_rx_lo_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_lo_freq
</UL>

<P><STRONG><a name="[175]"></a>ad9361_get_rx_rf_bandwidth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad9361_api.o(i.ad9361_get_rx_rf_bandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_rf_bandwidth
</UL>

<P><STRONG><a name="[126]"></a>ad9361_get_rx_rf_gain</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, ad9361_api.o(i.ad9361_get_rx_rf_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ad9361_get_rx_rf_gain &rArr; ad9361_get_rx_gain &rArr; ad9361_get_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_1rx1tx_channel_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx2_rf_gain
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx1_rf_gain
</UL>

<P><STRONG><a name="[128]"></a>ad9361_get_rx_sampling_freq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad9361_api.o(i.ad9361_get_rx_sampling_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ad9361_get_rx_sampling_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_samp_freq
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_samp_freq
</UL>

<P><STRONG><a name="[129]"></a>ad9361_get_tx_atten</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ad9361.o(i.ad9361_get_tx_atten))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ad9361_get_tx_atten &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_attenuation
</UL>

<P><STRONG><a name="[12a]"></a>ad9361_get_tx_attenuation</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ad9361_api.o(i.ad9361_get_tx_attenuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ad9361_get_tx_attenuation &rArr; ad9361_get_tx_atten &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_atten
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_1rx1tx_channel_map
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx2_attenuation
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx1_attenuation
</UL>

<P><STRONG><a name="[176]"></a>ad9361_get_tx_fir_en_dis</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad9361_api.o(i.ad9361_get_tx_fir_en_dis))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_fir_en
</UL>

<P><STRONG><a name="[12b]"></a>ad9361_get_tx_lo_freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad9361_api.o(i.ad9361_get_tx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ad9361_get_tx_lo_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_lo_freq
</UL>

<P><STRONG><a name="[177]"></a>ad9361_get_tx_rf_bandwidth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad9361_api.o(i.ad9361_get_tx_rf_bandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_rf_bandwidth
</UL>

<P><STRONG><a name="[12c]"></a>ad9361_get_tx_sampling_freq</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ad9361_api.o(i.ad9361_get_tx_sampling_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_get_tx_sampling_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_samp_freq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_samp_freq
</UL>

<P><STRONG><a name="[12e]"></a>ad9361_init</STRONG> (Thumb, 3136 bytes, Stack size 24 bytes, ad9361_api.o(i.ad9361_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ad9361_init &rArr; ad9361_setup &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zmalloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_clocks
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_reset
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init_gain_tables
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>ad9361_init_gain_tables</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_init_gain_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ad9361_init_gain_tables &rArr; ad9361_init_gain_info
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init_gain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
</UL>

<P><STRONG><a name="[135]"></a>ad9361_load_fir_filter_coef</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, ad9361.o(i.ad9361_load_fir_filter_coef))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ad9361_load_fir_filter_coef &rArr; ad9361_ensm_force_state &rArr; ad9361_ensm_get_state &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_prev_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_fir_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_fir_config
</UL>

<P><STRONG><a name="[130]"></a>ad9361_reset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ad9361.o(i.ad9361_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ad9361_reset &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad9361Reset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
</UL>

<P><STRONG><a name="[139]"></a>ad9361_rf_port_setup</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_rf_port_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ad9361_rf_port_setup &rArr; ad9361_txmon_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_control
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[13f]"></a>ad9361_rfpll_dummy_recalc_rate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_rfpll_dummy_recalc_rate))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_recalc_rate
</UL>

<P><STRONG><a name="[142]"></a>ad9361_rfpll_dummy_set_rate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_rfpll_dummy_set_rate))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_set_rate
</UL>

<P><STRONG><a name="[10f]"></a>ad9361_rfpll_int_recalc_rate</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, ad9361.o(i.ad9361_rfpll_int_recalc_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_to_clk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_readval
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_recalc_rate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
</UL>

<P><STRONG><a name="[13c]"></a>ad9361_rfpll_int_round_rate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_rfpll_int_round_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ad9361_rfpll_int_round_rate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_round_rate
</UL>

<P><STRONG><a name="[13d]"></a>ad9361_rfpll_int_set_rate</STRONG> (Thumb, 550 bytes, Stack size 88 bytes, ad9361.o(i.ad9361_rfpll_int_set_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ad9361_rfpll_int_set_rate &rArr; ad9361_fastlock_prepare &rArr; ad9361_trx_vco_cal_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_vco_cal_control
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_writem
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_vco_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calc_rfpll_int_divder
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_set_rate
</UL>

<P><STRONG><a name="[110]"></a>ad9361_rfpll_recalc_rate</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_rfpll_recalc_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_dummy_recalc_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
</UL>

<P><STRONG><a name="[140]"></a>ad9361_rfpll_round_rate</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_rfpll_round_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ad9361_rfpll_round_rate &rArr; ad9361_rfpll_int_round_rate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_round_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
</UL>

<P><STRONG><a name="[141]"></a>ad9361_rfpll_set_rate</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_rfpll_set_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_dummy_set_rate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_gt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
</UL>

<P><STRONG><a name="[146]"></a>ad9361_set_dcxo_tune</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_set_dcxo_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ad9361_set_dcxo_tune &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[147]"></a>ad9361_set_ensm_mode</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_set_ensm_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ad9361_set_ensm_mode &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[148]"></a>ad9361_set_gain_ctrl_mode</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_set_gain_ctrl_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ad9361_set_gain_ctrl_mode &rArr; ad9361_gc_update &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_en_dis_rx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain_control_mode
</UL>

<P><STRONG><a name="[149]"></a>ad9361_set_rx_fir_config</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ad9361_api.o(i.ad9361_set_rx_fir_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ad9361_set_rx_fir_config &rArr; ad9361_load_fir_filter_coef &rArr; ad9361_ensm_force_state &rArr; ad9361_ensm_get_state &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>ad9361_set_rx_fir_en_dis</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ad9361_api.o(i.ad9361_set_rx_fir_en_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ad9361_set_rx_fir_en_dis &rArr; ad9361_validate_enable_fir &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_fir_en
</UL>

<P><STRONG><a name="[14c]"></a>ad9361_set_rx_gain</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_set_rx_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ad9361_set_rx_gain &rArr; set_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_split_table_gain
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_full_table_gain
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_gain
</UL>

<P><STRONG><a name="[14f]"></a>ad9361_set_rx_gain_control_mode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ad9361_api.o(i.ad9361_set_rx_gain_control_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ad9361_set_rx_gain_control_mode &rArr; ad9361_set_gain_ctrl_mode &rArr; ad9361_gc_update &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_gain_ctrl_mode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_1rx1tx_channel_map
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_gc_mode
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_gc_mode
</UL>

<P><STRONG><a name="[150]"></a>ad9361_set_rx_lo_freq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad9361_api.o(i.ad9361_set_rx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ad9361_set_rx_lo_freq &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_to_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_lo_freq
</UL>

<P><STRONG><a name="[152]"></a>ad9361_set_rx_rf_bandwidth</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ad9361_api.o(i.ad9361_set_rx_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ad9361_set_rx_rf_bandwidth &rArr; ad9361_update_rf_bandwidth &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_rf_bw
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_rf_bandwidth
</UL>

<P><STRONG><a name="[155]"></a>ad9361_set_rx_rf_gain</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, ad9361_api.o(i.ad9361_set_rx_rf_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ad9361_set_rx_rf_gain &rArr; ad9361_set_rx_gain &rArr; set_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_1rx1tx_channel_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_rf_gain
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_rf_gain
</UL>

<P><STRONG><a name="[156]"></a>ad9361_set_rx_sampling_freq</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, ad9361_api.o(i.ad9361_set_rx_sampling_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ad9361_set_rx_sampling_freq &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calculate_rf_clock_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_samp_freq
</UL>

<P><STRONG><a name="[157]"></a>ad9361_set_trx_clock_chain</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, ad9361.o(i.ad9361_set_trx_clock_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_dig_tune
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_trx_clock_chain
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rssi_setup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxadc_setup
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_sampling_freq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_sampling_freq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[15a]"></a>ad9361_set_tx_atten</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ad9361.o(i.ad9361_set_tx_atten))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ad9361_set_tx_atten &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_writem
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_attenuation
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[15b]"></a>ad9361_set_tx_attenuation</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ad9361_api.o(i.ad9361_set_tx_attenuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_set_tx_attenuation &rArr; ad9361_set_tx_atten &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_atten
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_1rx1tx_channel_map
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx2_attenuation
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx1_attenuation
</UL>

<P><STRONG><a name="[15c]"></a>ad9361_set_tx_fir_config</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ad9361_api.o(i.ad9361_set_tx_fir_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ad9361_set_tx_fir_config &rArr; ad9361_load_fir_filter_coef &rArr; ad9361_ensm_force_state &rArr; ad9361_ensm_get_state &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>ad9361_set_tx_fir_en_dis</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ad9361_api.o(i.ad9361_set_tx_fir_en_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ad9361_set_tx_fir_en_dis &rArr; ad9361_validate_enable_fir &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_fir_en
</UL>

<P><STRONG><a name="[15e]"></a>ad9361_set_tx_lo_freq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad9361_api.o(i.ad9361_set_tx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ad9361_set_tx_lo_freq &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_to_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_lo_freq
</UL>

<P><STRONG><a name="[15f]"></a>ad9361_set_tx_rf_bandwidth</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ad9361_api.o(i.ad9361_set_tx_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ad9361_set_tx_rf_bandwidth &rArr; ad9361_update_rf_bandwidth &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_rf_bw
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_rf_bandwidth
</UL>

<P><STRONG><a name="[160]"></a>ad9361_set_tx_sampling_freq</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, ad9361_api.o(i.ad9361_set_tx_sampling_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ad9361_set_tx_sampling_freq &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calculate_rf_clock_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_samp_freq
</UL>

<P><STRONG><a name="[133]"></a>ad9361_setup</STRONG> (Thumb, 1972 bytes, Stack size 56 bytes, ad9361.o(i.ad9361_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ad9361_setup &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_set_rate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_prepare_enable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_rf_bw
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tracking_control
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_to_clk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_atten
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_ensm_mode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_dcxo_tune
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_port_setup
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_en_dis_tx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_en_dis_rx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_mux_set_parent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txrx_synth_cp_calib
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_setup
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_second_filter_calib
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_analog_filter_calib
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_tia_calib
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_bb_analog_filter_calib
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_adc_setup
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rssi_setup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_dc_offset_calib
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ref_div_sel
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_pp_port_setup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_mixer_gm_subtable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gpo_setup
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_setup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_setup
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxadc_setup
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
</UL>

<P><STRONG><a name="[e6]"></a>ad9361_spi_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ad9361.o(i.ad9361_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_register
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_ensm_mode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_tia_calib
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_adc_setup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_split_table_gain
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_clk_scaler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_readval
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_tx_quad_calib
</UL>

<P><STRONG><a name="[e1]"></a>ad9361_spi_readm</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_spi_readm))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_gain_ctrl_mode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_atten
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_recalc_rate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
</UL>

<P><STRONG><a name="[e3]"></a>ad9361_spi_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tracking_control
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_gain_ctrl_mode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_ensm_mode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_dcxo_tune
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_port_setup
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_set_rate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txrx_synth_cp_calib
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_setup
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_second_filter_calib
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_analog_filter_calib
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_ext_lo_control
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_tia_calib
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_bb_analog_filter_calib
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_adc_setup
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rssi_setup
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_vco_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_dc_offset_calib
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_pp_port_setup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_mixer_gm_subtable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_gt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gpo_setup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_split_table_gain
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_setup
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_readval
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_prepare
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_setup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxadc_setup
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_tx_quad_calib
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
</UL>

<P><STRONG><a name="[167]"></a>ad9361_synth_lo_powerdown</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_synth_lo_powerdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ad9361_synth_lo_powerdown &rArr; ad9361_spi_writem &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_writem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
</UL>

<P><STRONG><a name="[13b]"></a>ad9361_to_clk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_to_clk))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_lo_freq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_lo_freq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
</UL>

<P><STRONG><a name="[112]"></a>ad9361_tracking_control</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_tracking_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_tracking_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
</UL>

<P><STRONG><a name="[154]"></a>ad9361_update_rf_bandwidth</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_update_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ad9361_update_rf_bandwidth &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tracking_control
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_restore_prev_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_sampling_freq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_rf_bandwidth
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_sampling_freq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_bandwidth
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
</UL>

<P><STRONG><a name="[14b]"></a>ad9361_validate_enable_fir</STRONG> (Thumb, 432 bytes, Stack size 88 bytes, ad9361.o(i.ad9361_validate_enable_fir))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ad9361_validate_enable_fir &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_dig_tune
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calculate_rf_clock_chain
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_fir_en_dis
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_fir_en_dis
</UL>

<P><STRONG><a name="[153]"></a>ad9361_validate_rf_bw</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_validate_rf_bw))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_rf_bandwidth
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_bandwidth
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[fe]"></a>ad9361_validate_rfpll</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ad9361.o(i.ad9361_validate_rfpll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ad9361_validate_rfpll
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calc_rfpll_int_divder
</UL>

<P><STRONG><a name="[e8]"></a>clk_get_rate</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, util.o(i.clk_get_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_recalc_rate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_dummy_recalc_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_recalc_rate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_recalc_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_sampling_freq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_lo_freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_sampling_freq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_lo_freq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_enable_fir
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_full_table_gain
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rssi_setup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_full_table_gain
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>

<P><STRONG><a name="[162]"></a>clk_prepare_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, util.o(i.clk_prepare_enable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[151]"></a>clk_set_rate</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, util.o(i.clk_set_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_set_rate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_round_rate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_recalc_rate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_round_rate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_dummy_set_rate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_dummy_recalc_rate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_set_rate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_round_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_recalc_rate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_set_rate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_round_rate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_recalc_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_lo_freq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_lo_freq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
</UL>

<P><STRONG><a name="[16a]"></a>console_check_commands</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, console.o(i.console_check_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = console_check_commands &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>console_get_command</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, console.o(i.console_get_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = console_get_command &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>console_print</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, console.o(i.console_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_char
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_help
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_samp_freq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_lo_freq
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_fir_en
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx2_attenuation
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx1_attenuation
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_samp_freq
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_rf_bandwidth
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_lo_freq
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_fir_en
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_rf_gain
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_gc_mode
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_rf_gain
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_gc_mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_samp_freq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_rf_bandwidth
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_lo_freq
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_fir_en
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx2_attenuation
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx1_attenuation
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_samp_freq
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_rf_bandwidth
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_lo_freq
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_fir_en
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx2_rf_gain
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx2_gc_mode
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx1_rf_gain
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx1_gc_mode
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_register
</UL>

<P><STRONG><a name="[171]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>

<P><STRONG><a name="[f8]"></a>do_div</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, util.o(i.do_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_div &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_set_rate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_round_rate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_recalc_rate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_second_filter_calib
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_tia_calib
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_adc_setup
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_vco_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_calc_rfpll_int_divder
</UL>

<P><STRONG><a name="[f5]"></a>find_first_bit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, util.o(i.find_first_bit))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tracking_control
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_atten
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_get_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_en_dis_tx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_en_dis_rx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_split_table_gain
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_full_table_gain
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txrx_synth_cp_calib
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_setup
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_control
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_analog_filter_calib
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_vco_cal_control
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_ext_lo_control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_clk_scaler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_bb_analog_filter_calib
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_vco_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_pp_port_setup
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_gt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_split_table_gain
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_full_table_gain
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_clk_scaler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_setup
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_setup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_set
</UL>

<P><STRONG><a name="[8a]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[10d]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
</UL>

<P><STRONG><a name="[1]"></a>get_help</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, command.o(i.get_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_help &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>get_register</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, command.o(i.get_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_register &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>get_rx1_gc_mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, command.o(i.get_rx1_gc_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_rx1_gc_mode &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain_control_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>get_rx1_rf_gain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(i.get_rx1_rf_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = get_rx1_rf_gain &rArr; ad9361_get_rx_rf_gain &rArr; ad9361_get_rx_gain &rArr; ad9361_get_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_rf_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>get_rx2_gc_mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, command.o(i.get_rx2_gc_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_rx2_gc_mode &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain_control_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>get_rx2_rf_gain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(i.get_rx2_rf_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = get_rx2_rf_gain &rArr; ad9361_get_rx_rf_gain &rArr; ad9361_get_rx_gain &rArr; ad9361_get_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_rf_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>get_rx_fir_en</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(i.get_rx_fir_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_rx_fir_en &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_fir_en_dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>get_rx_lo_freq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, command.o(i.get_rx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_rx_lo_freq &rArr; ad9361_get_rx_lo_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_lo_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>get_rx_rf_bandwidth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, command.o(i.get_rx_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_rx_rf_bandwidth &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_rf_bandwidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>get_rx_samp_freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, command.o(i.get_rx_samp_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = get_rx_samp_freq &rArr; ad9361_get_rx_sampling_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_sampling_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>get_tx1_attenuation</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(i.get_tx1_attenuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_tx1_attenuation &rArr; ad9361_get_tx_attenuation &rArr; ad9361_get_tx_atten &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_attenuation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>get_tx2_attenuation</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, command.o(i.get_tx2_attenuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_tx2_attenuation &rArr; ad9361_get_tx_attenuation &rArr; ad9361_get_tx_atten &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_attenuation
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>get_tx_fir_en</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(i.get_tx_fir_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_tx_fir_en &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_fir_en_dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>get_tx_lo_freq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, command.o(i.get_tx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_tx_lo_freq &rArr; ad9361_get_tx_lo_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_lo_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>get_tx_rf_bandwidth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, command.o(i.get_tx_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_tx_rf_bandwidth &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_rf_bandwidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>get_tx_samp_freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, command.o(i.get_tx_samp_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_tx_samp_freq &rArr; ad9361_get_tx_sampling_freq &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_sampling_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>gpio_direction</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.gpio_direction))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>gpio_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(i.gpio_init))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>ilog2</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, util.o(i.ilog2))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_setup
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_clk_scaler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_setup
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxadc_setup
</UL>

<P><STRONG><a name="[144]"></a>int_sqrt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, util.o(i.int_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_adc_setup
</UL>

<P><STRONG><a name="[16f]"></a>int_to_str</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, console.o(i.int_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = int_to_str
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
</UL>

<P><STRONG><a name="[83]"></a>main</STRONG> (Thumb, 296 bytes, Stack size 288 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = main &rArr; ad9361_init &rArr; ad9361_setup &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_help
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_get_command
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_check_commands
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_fir_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_fir_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zmalloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_clocks
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
</UL>

<P><STRONG><a name="[118]"></a>mdelay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform.o(i.mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mdelay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zmalloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
</UL>

<P><STRONG><a name="[131]"></a>register_clocks</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, ad9361.o(i.register_clocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = register_clocks &rArr; ad9361_clk_register &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_register
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
</UL>

<P><STRONG><a name="[16]"></a>set_rx1_gc_mode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, command.o(i.set_rx1_gc_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = set_rx1_gc_mode &rArr; ad9361_set_rx_gain_control_mode &rArr; ad9361_set_gain_ctrl_mode &rArr; ad9361_gc_update &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain_control_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>set_rx1_rf_gain</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, command.o(i.set_rx1_rf_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = set_rx1_rf_gain &rArr; ad9361_set_rx_rf_gain &rArr; ad9361_set_rx_gain &rArr; set_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>set_rx2_gc_mode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, command.o(i.set_rx2_gc_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = set_rx2_gc_mode &rArr; ad9361_set_rx_gain_control_mode &rArr; ad9361_set_gain_ctrl_mode &rArr; ad9361_gc_update &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain_control_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>set_rx2_rf_gain</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, command.o(i.set_rx2_rf_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = set_rx2_rf_gain &rArr; ad9361_set_rx_rf_gain &rArr; ad9361_set_rx_gain &rArr; set_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>set_rx_fir_en</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, command.o(i.set_rx_fir_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = set_rx_fir_en &rArr; ad9361_set_rx_fir_en_dis &rArr; ad9361_validate_enable_fir &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_fir_en_dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>set_rx_lo_freq</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, command.o(i.set_rx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = set_rx_lo_freq &rArr; ad9361_set_rx_lo_freq &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_lo_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>set_rx_rf_bandwidth</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, command.o(i.set_rx_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = set_rx_rf_bandwidth &rArr; ad9361_set_rx_rf_bandwidth &rArr; ad9361_update_rf_bandwidth &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_rf_bandwidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>set_rx_samp_freq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, command.o(i.set_rx_samp_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = set_rx_samp_freq &rArr; ad9361_set_rx_sampling_freq &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_sampling_freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_sampling_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>set_tx1_attenuation</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, command.o(i.set_tx1_attenuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_tx1_attenuation &rArr; ad9361_set_tx_attenuation &rArr; ad9361_set_tx_atten &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_attenuation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>set_tx2_attenuation</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, command.o(i.set_tx2_attenuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_tx2_attenuation &rArr; ad9361_set_tx_attenuation &rArr; ad9361_set_tx_atten &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_attenuation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>set_tx_fir_en</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, command.o(i.set_tx_fir_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = set_tx_fir_en &rArr; ad9361_set_tx_fir_en_dis &rArr; ad9361_validate_enable_fir &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_fir_en_dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>set_tx_lo_freq</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, command.o(i.set_tx_lo_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = set_tx_lo_freq &rArr; ad9361_set_tx_lo_freq &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_lo_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>set_tx_rf_bandwidth</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, command.o(i.set_tx_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = set_tx_rf_bandwidth &rArr; ad9361_set_tx_rf_bandwidth &rArr; ad9361_update_rf_bandwidth &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_rf_bandwidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>set_tx_samp_freq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, command.o(i.set_tx_samp_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = set_tx_samp_freq &rArr; ad9361_set_tx_sampling_freq &rArr; ad9361_set_trx_clock_chain &rArr; clk_set_rate &rArr; ad9361_rfpll_set_rate &rArr; ad9361_do_calib_run &rArr; ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_invalid_param_message
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_sampling_freq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_tx_sampling_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>show_invalid_param_message</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, command.o(i.show_invalid_param_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = show_invalid_param_message &rArr; console_print &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_samp_freq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_rf_bandwidth
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx_fir_en
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx2_attenuation
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tx1_attenuation
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_samp_freq
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_rf_bandwidth
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx_fir_en
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_rf_gain
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx2_gc_mode
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_rf_gain
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rx1_gc_mode
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_register
</UL>

<P><STRONG><a name="[17a]"></a>spi_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, platform.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spi_init &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>spi_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, platform.o(i.spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>

<P><STRONG><a name="[17c]"></a>spi_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, platform.o(i.spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spi_write &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>

<P><STRONG><a name="[165]"></a>spi_write_then_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, platform.o(i.spi_write_then_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_writem
</UL>

<P><STRONG><a name="[16d]"></a>uart_write_char</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, console.o(i.uart_write_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_write_char &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
</UL>

<P><STRONG><a name="[170]"></a>uart_write_string</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(i.uart_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_write_string &rArr; uart_write_char &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_char
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_print
</UL>

<P><STRONG><a name="[101]"></a>udelay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform.o(i.udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udelay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
</UL>

<P><STRONG><a name="[12f]"></a>zmalloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, util.o(i.zmalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = zmalloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[89]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[c5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>UART_Receive_IT</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c8]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[b4]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c0]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[bf]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[e0]"></a>__ad9361_spi_readf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad9361.o(i.__ad9361_spi_readf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_get_state
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_force_state
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_ext_lo_control
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_split_table_gain
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_full_table_gain
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_clk_scaler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
</UL>

<P><STRONG><a name="[e2]"></a>__ad9361_spi_writef</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ad9361.o(i.__ad9361_spi_writef))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_readm
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tracking_control
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_atten
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_fir_filter_coef
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_en_dis_tx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_en_dis_rx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_split_table_gain
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_full_table_gain
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txrx_synth_cp_calib
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_setup
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txmon_control
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_analog_filter_calib
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_vco_cal_control
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_ext_lo_control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_clk_scaler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_bb_analog_filter_calib
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_vco_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_pp_port_setup
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_gt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_setup
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_prepare
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_setup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_set
</UL>

<P><STRONG><a name="[e4]"></a>__ad9361_tx_quad_calib</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ad9361.o(i.__ad9361_tx_quad_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_phase_search
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
</UL>

<P><STRONG><a name="[e7]"></a>__ad9361_update_rf_bandwidth</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ad9361.o(i.__ad9361_update_rf_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = __ad9361_update_rf_bandwidth &rArr; ad9361_rx_adc_setup &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_second_filter_calib
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_analog_filter_calib
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_tia_calib
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_bb_analog_filter_calib
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_adc_setup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
</UL>

<P><STRONG><a name="[f2]"></a>ad9361_auxadc_setup</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_auxadc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ad9361_auxadc_setup &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ilog2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
</UL>

<P><STRONG><a name="[f4]"></a>ad9361_auxdac_set</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_auxdac_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_auxdac_set &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_setup
</UL>

<P><STRONG><a name="[f6]"></a>ad9361_auxdac_setup</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_auxdac_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_auxdac_setup &rArr; ad9361_auxdac_set &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_auxdac_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[fd]"></a>ad9361_calc_rfpll_int_divder</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, ad9361.o(i.ad9361_calc_rfpll_int_divder))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ad9361_calc_rfpll_int_divder &rArr; do_div &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_validate_rfpll
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
</UL>

<P><STRONG><a name="[fc]"></a>ad9361_check_cal_done</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_check_cal_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_set_rate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_txrx_synth_cp_calib
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
</UL>

<P><STRONG><a name="[10b]"></a>ad9361_clk_register</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_clk_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_clk_register &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_PTR
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_recalc_rate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_recalc_rate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_recalc_rate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_clocks
</UL>

<P><STRONG><a name="[11d]"></a>ad9361_fastlock_prepare</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, ad9361.o(i.ad9361_fastlock_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ad9361_fastlock_prepare &rArr; ad9361_trx_vco_cal_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_trx_vco_cal_control
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
</UL>

<P><STRONG><a name="[11e]"></a>ad9361_fastlock_readval</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_fastlock_readval))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_recalc_rate
</UL>

<P><STRONG><a name="[11f]"></a>ad9361_gc_setup</STRONG> (Thumb, 1934 bytes, Stack size 40 bytes, ad9361.o(i.ad9361_gc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ad9361_gc_setup &rArr; ad9361_gc_update &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ilog2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[120]"></a>ad9361_gc_update</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, ad9361.o(i.ad9361_gc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ad9361_gc_update &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ilog2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_gain_ctrl_mode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gc_setup
</UL>

<P><STRONG><a name="[103]"></a>ad9361_get_clk_scaler</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_get_clk_scaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ad9361_get_clk_scaler &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_recalc_rate
</UL>

<P><STRONG><a name="[121]"></a>ad9361_get_full_table_gain</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_get_full_table_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ad9361_get_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gt_tableindex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain
</UL>

<P><STRONG><a name="[124]"></a>ad9361_get_split_table_gain</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_get_split_table_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ad9361_get_split_table_gain &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_rx_gain
</UL>

<P><STRONG><a name="[12d]"></a>ad9361_gpo_setup</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_gpo_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ad9361_gpo_setup &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[122]"></a>ad9361_gt_tableindex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_gt_tableindex))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_full_table_gain
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_load_gt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_get_full_table_gain
</UL>

<P><STRONG><a name="[134]"></a>ad9361_init_gain_info</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_init_gain_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ad9361_init_gain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_init_gain_tables
</UL>

<P><STRONG><a name="[136]"></a>ad9361_load_gt</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, ad9361.o(i.ad9361_load_gt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ad9361_load_gt &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gt_tableindex
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_set_rate
</UL>

<P><STRONG><a name="[137]"></a>ad9361_load_mixer_gm_subtable</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_load_mixer_gm_subtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ad9361_load_mixer_gm_subtable &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[138]"></a>ad9361_pp_port_setup</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_pp_port_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ad9361_pp_port_setup &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[161]"></a>ad9361_ref_div_sel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_ref_div_sel))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[115]"></a>ad9361_rf_dc_offset_calib</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_rf_dc_offset_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_rf_dc_offset_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
</UL>

<P><STRONG><a name="[13e]"></a>ad9361_rfpll_vco_init</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, ad9361.o(i.ad9361_rfpll_vco_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_rfpll_vco_init &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
</UL>

<P><STRONG><a name="[143]"></a>ad9361_rssi_setup</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, ad9361.o(i.ad9361_rssi_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ad9361_rssi_setup &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
</UL>

<P><STRONG><a name="[e5]"></a>ad9361_run_calibration</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_run_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_bb_analog_filter_calib
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rx_bb_analog_filter_calib
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_dc_offset_calib
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_tx_quad_calib
</UL>

<P><STRONG><a name="[ed]"></a>ad9361_rx_adc_setup</STRONG> (Thumb, 1778 bytes, Stack size 136 bytes, ad9361.o(i.ad9361_rx_adc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ad9361_rx_adc_setup &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_sqrt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>

<P><STRONG><a name="[e9]"></a>ad9361_rx_bb_analog_filter_calib</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_rx_bb_analog_filter_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_rx_bb_analog_filter_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>

<P><STRONG><a name="[eb]"></a>ad9361_rx_tia_calib</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_rx_tia_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ad9361_rx_tia_calib &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>

<P><STRONG><a name="[105]"></a>ad9361_set_clk_scaler</STRONG> (Thumb, 602 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_set_clk_scaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_set_clk_scaler &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ilog2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_to_refclk_scaler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_set_rate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_factor_round_rate
</UL>

<P><STRONG><a name="[fb]"></a>ad9361_spi_writem</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_spi_writem))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ad9361_spi_writem &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_synth_lo_powerdown
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_tx_atten
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_bbpll_set_rate
</UL>

<P><STRONG><a name="[145]"></a>ad9361_to_refclk_scaler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ad9361.o(i.ad9361_to_refclk_scaler))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_clk_scaler
</UL>

<P><STRONG><a name="[109]"></a>ad9361_trx_ext_lo_control</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ad9361.o(i.ad9361_trx_ext_lo_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ad9361_trx_ext_lo_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_clk_mux_set_parent
</UL>

<P><STRONG><a name="[11c]"></a>ad9361_trx_vco_cal_control</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_trx_vco_cal_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ad9361_trx_vco_cal_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rfpll_int_set_rate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_ensm_set_state
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_fastlock_prepare
</UL>

<P><STRONG><a name="[ea]"></a>ad9361_tx_bb_analog_filter_calib</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_tx_bb_analog_filter_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ad9361_tx_bb_analog_filter_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_run_calibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>

<P><STRONG><a name="[ec]"></a>ad9361_tx_bb_second_filter_calib</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, ad9361.o(i.ad9361_tx_bb_second_filter_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ad9361_tx_bb_second_filter_calib &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
</UL>

<P><STRONG><a name="[113]"></a>ad9361_tx_quad_calib</STRONG> (Thumb, 842 bytes, Stack size 112 bytes, ad9361.o(i.ad9361_tx_quad_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ad9361_tx_quad_calib &rArr; ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_synth_lo_powerdown
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_phase_search
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_update_rf_bandwidth
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_tx_quad_calib
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_readf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_update_rf_bandwidth
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_do_calib_run
</UL>

<P><STRONG><a name="[168]"></a>ad9361_tx_quad_phase_search</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, ad9361.o(i.ad9361_tx_quad_phase_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ad9361_tx_quad_phase_search &rArr; __ad9361_tx_quad_calib &rArr; ad9361_run_calibration &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_find_opt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_tx_quad_calib
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_tx_quad_calib
</UL>

<P><STRONG><a name="[13a]"></a>ad9361_txmon_control</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_txmon_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ad9361_txmon_control &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_rf_port_setup
</UL>

<P><STRONG><a name="[164]"></a>ad9361_txmon_setup</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_txmon_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ad9361_txmon_setup &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ilog2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[163]"></a>ad9361_txrx_synth_cp_calib</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, ad9361.o(i.ad9361_txrx_synth_cp_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ad9361_txrx_synth_cp_calib &rArr; ad9361_check_cal_done &rArr; __ad9361_spi_readf &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_spi_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_check_cal_done
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_setup
</UL>

<P><STRONG><a name="[158]"></a>ad9361_validate_trx_clock_chain</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ad9361.o(i.ad9361_validate_trx_clock_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ad9361_validate_trx_clock_chain &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_trx_clock_chain
</UL>

<P><STRONG><a name="[14e]"></a>set_full_table_gain</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ad9361.o(i.set_full_table_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = set_full_table_gain &rArr; clk_get_rate &rArr; ad9361_rfpll_recalc_rate &rArr; ad9361_rfpll_int_recalc_rate &rArr; ad9361_fastlock_readval &rArr; ad9361_spi_read &rArr; ad9361_spi_readm &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_rate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_from_clk
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_gt_tableindex
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain
</UL>

<P><STRONG><a name="[14d]"></a>set_split_table_gain</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ad9361.o(i.set_split_table_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_split_table_gain &rArr; __ad9361_spi_writef &rArr; ad9361_spi_write &rArr; spi_write_then_read &rArr; spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ad9361_spi_writef
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad9361_set_rx_gain
</UL>

<P><STRONG><a name="[df]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>

<P><STRONG><a name="[9e]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[a4]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
